<h3>Singleton Design Pattern</h3>

<li>Ensuring that one and only one object of the class gets created</li>
<li>Providing an access point for an object that is global to the program</li>
<li>Controlling concurrent access to resources that are shared</li>

Concept:<br> Make constructor private and create a static method that does the object initialization. Each time return same existing object.

Problem: <br>Python don't have private constructor.

Goal: <br>Check each time object already exits or not. if yes then return the existing object else create new one

Solution:<br> Use __new__(special method and check whether class have existing instance or not)


Python Concept:<br> when we create an instance of a class then first __new__ method is called and then only __init__ method. This means if we can stop __init__ from being called when we have already an instance then that particular class becomes Singleton. 


More:
Only when __new__ returns the created instance then __init__ gets called. If __new__ does not return an instance then __init__ would not be called. Remember __new__ is always called before __init__.




<code>
class Animal(object):<br>
	def __new__(cls, *args, **kwargs): #here new takes Class name itself as first arguments and returns instance of Animal <br>
		print(cls)<br>
		print(args)<br>
		print(kwargs)<br>
		#if we return from here then it gives  <__main__.Animal at 0x343357390> <br>
		obj_ins = object.__new__(cls, *args, **kwargs)<br>
		return obj_ins<br>
	#If __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked. <br>
	#__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation. It is also commonly overridden in custom metaclasses in order to customize class creation.<br>
	# https://docs.python.org/3/reference/datamodel.html#object.__new__<br>
	def __init__(self, a, b, c):<br>
		self.a, self.b, self.c = a, b, c<br>
		
</code>